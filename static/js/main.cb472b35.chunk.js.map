{"version":3,"sources":["BlockType.ts","formatters.ts","Block.tsx","BitLength.ts","Row.tsx","Rows.tsx","HexBlock.tsx","PixelBlock.tsx","TextBlock.tsx","Inspector.tsx","DropArea.tsx","RowLayout.ts","Layout.ts","HexLayout.ts","TextLayout.ts","PixelLayout.ts","layoutsForType.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BlockType","formatBinary","value","length","toString","padStart","formatHex","prefix","Block","BitLength","currentType","type","start","top","height","visibleStart","visibleEnd","cursor","onUpdateCursor","onUpdateLength","onUpdateType","onMergeBlock","contentsComponent","props","onLengthChange","useCallback","e","newLength","parseInt","target","onTypeChange","onBlockSelect","onMergeClick","types","Object","values","Component","isSelected","blockLayoutStyle","useMemo","className","style","onClick","onChange","map","steps","Byte","Word","Dword","Row","data","bitLength","cellFormatter","result","onCellClick","position","dataset","stopPropagation","step","end","Math","min","byteLength","getUint8","getUint16","getUint32","push","data-position","Rows","columns","rows","row","ceil","rowStart","rowLength","HexBlock","formatter","PixelBlock","background","width","TextBlock","String","fromCharCode","replace","Inspector","onSplitBlock","byte","word","dword","wordl","dwordl","DropArea","onUpdateData","defaultText","useState","label","setLabel","onDrop","item","dataTransfer","files","a","arrayBuffer","buffer","DataView","preventDefault","readFile","onDragOver","onDragLeave","RowLayout","rowHeight","getHeight","this","HexLayout","TextLayout","PixelLayout","layoutsForType","Hex","Text","Pixel","componentsForType","App","setData","blocks","setBlocks","setCursor","scroller","useRef","setVisibleStart","setVisibleEnd","useEffect","fetch","response","blob","array","createFile","blockLayout","forEach","layout","scrollerStyle","lastBlock","onUpdateScroll","current","scrollTop","visibleHeight","offsetHeight","useLayoutEffect","index","findIndex","block","newBlocks","slice","splice","oldLayoutBlock","partition","newBlock","onScroll","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb472b35.chunk.js","sourcesContent":["enum BlockType {\n  Text = 'Text',\n  Hex = 'Hex',\n  Pixel = 'Pixel',\n}\n\nexport default BlockType;\n","export function formatBinary(value: number, length: number) {\n  return value.toString(2).padStart(length, '0');\n}\n\nexport function formatHex(value: number, length: number, prefix: string = '0x') {\n  return prefix + value.toString(16).padStart(length, '0');\n}\n","import React, { FunctionComponent, useCallback, useMemo } from 'react';\nimport BlockType from './BlockType';\nimport { formatHex } from './formatters';\nimport ViewProps from './ViewProps';\nimport './Block.css';\n\ninterface BlockProps extends ViewProps {\n  type: BlockType;\n  top: number;\n  height: number;\n  onUpdateLength: (start: number, length: number) => void;\n  onUpdateType: (start: number, type: BlockType) => void;\n  onMergeBlock: (start: number) => void;\n  contentsComponent: FunctionComponent<ViewProps>;\n}\n\nfunction Block({\n  type: currentType,\n  start,\n  length,\n  top,\n  height,\n  visibleStart,\n  visibleEnd,\n  cursor,\n  onUpdateCursor,\n  onUpdateLength,\n  onUpdateType,\n  onMergeBlock,\n  contentsComponent,\n  ...props\n}: BlockProps) {\n  const onLengthChange = useCallback(\n    (e) => {\n      const newLength = parseInt(e.target.value, 10);\n      if (newLength) {\n        onUpdateLength(start, newLength);\n      }\n    },\n    [start, onUpdateLength],\n  );\n\n  const onTypeChange = useCallback(\n    (e) => {\n      const type = e.target.value;\n      onUpdateType(start, type);\n    },\n    [onUpdateType, start],\n  );\n\n  const onBlockSelect = useCallback(() => {\n    onUpdateCursor(start);\n  }, [start, onUpdateCursor]);\n\n  const onMergeClick = useCallback(() => {\n    onMergeBlock(start);\n  }, [start, onMergeBlock]);\n\n  const types = Object.values(BlockType);\n  const Component = contentsComponent;\n  const isSelected = cursor >= start && cursor < start + length;\n\n  const blockLayoutStyle = useMemo(\n    () => ({\n      top,\n      height,\n    }),\n    [top, height],\n  );\n\n  if (top > visibleEnd || top + height < visibleStart) {\n    return null;\n  }\n\n  return (\n    <div className={`Block${isSelected ? ' Selected' : ''}`} style={blockLayoutStyle} onClick={onBlockSelect}>\n      <div className=\"BlockAddress\">{formatHex(start, 16)}</div>\n      <div className=\"BlockActions\">\n        <select value={currentType} onChange={onTypeChange}>\n          {types.map((type) => (\n            <option key={type} value={type}>\n              {type}\n            </option>\n          ))}\n        </select>\n        {start ? <button onClick={onMergeClick}>Merge</button> : null}\n      </div>\n      <div className=\"BlockContents\">\n        <Component\n          start={start}\n          length={length}\n          visibleEnd={visibleEnd}\n          visibleStart={visibleStart}\n          cursor={cursor}\n          onUpdateCursor={onUpdateCursor}\n          {...props}\n        />\n      </div>\n      <div className=\"BlockOptions\">\n        <div className=\"BlockOptionsOverflow\">\n          {isSelected ? (\n            <div className=\"BlockOptionList\">\n              <div>\n                <input value={length} onChange={onLengthChange} />\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Block;\n","enum BitLength {\n  Byte,\n  Word,\n  Dword,\n}\n\nexport default BitLength;\n","import React, { ReactElement, ReactNode, useCallback } from 'react';\nimport BitLength from './BitLength';\nimport ViewProps from './ViewProps';\n\nconst steps = {\n  [BitLength.Byte]: 1,\n  [BitLength.Word]: 2,\n  [BitLength.Dword]: 4,\n};\n\nexport interface RowProps extends ViewProps {\n  className?: string;\n  bitLength: BitLength;\n  cellFormatter: (position: number, value: number) => ReactNode;\n}\n\nfunction Row({ data, start, length, cursor, bitLength, cellFormatter, className, onUpdateCursor }: RowProps) {\n  const result: ReactElement[] = [];\n\n  const onCellClick = useCallback(\n    (e) => {\n      const position = parseInt(e.target.dataset.position, 10);\n      onUpdateCursor(position);\n      e.stopPropagation();\n    },\n    [onUpdateCursor],\n  );\n\n  const step = steps[bitLength];\n\n  const end = Math.min(start + length, data.byteLength - 4);\n  for (let position = start; position < end; position += step) {\n    const isSelected = cursor === position;\n    let value = data.getUint8(position);\n    if (bitLength === BitLength.Word) {\n      value = data.getUint16(position);\n    } else if (bitLength === BitLength.Dword) {\n      value = data.getUint32(position);\n    }\n\n    result.push(\n      <span\n        onClick={onCellClick}\n        className={`Cell${isSelected ? ' Selected' : ''}`}\n        key={position}\n        data-position={position}\n      >\n        {cellFormatter(position, value)}\n      </span>,\n    );\n  }\n  return <div className={`Row ${className ?? ''}`}>{result}</div>;\n}\n\nexport default Row;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport './Block.css';\nimport Row, { RowProps } from './Row';\n\ninterface RowsProps extends RowProps {\n  className?: string;\n}\n\nconst Rows: FunctionComponent<RowsProps> = ({ start, length, cursor, columns, ...props }) => {\n  const rows: ReactElement[] = [];\n  for (let row = 0; row < Math.ceil(length / columns); row++) {\n    const rowStart = start + row * columns;\n    const rowEnd = Math.min(start + length, rowStart + columns);\n    const rowLength = rowEnd - rowStart;\n    rows.push(<Row key={row} start={rowStart} length={rowLength} cursor={cursor} columns={columns} {...props} />);\n  }\n\n  return <div>{rows}</div>;\n};\n\nexport default Rows;\n","import React, { FunctionComponent, useCallback } from 'react';\nimport BitLength from './BitLength';\nimport { formatHex } from './formatters';\nimport Rows from './Rows';\nimport ViewProps from './ViewProps';\nimport './Block.css';\n\nconst HexBlock: FunctionComponent<ViewProps> = (props) => {\n  const formatter = useCallback((position, value) => formatHex(value, 2, ''), []);\n\n  return <Rows bitLength={BitLength.Byte} cellFormatter={formatter} {...props} />;\n};\n\nexport default HexBlock;\n","import React, { FunctionComponent, useCallback } from 'react';\nimport BitLength from './BitLength';\nimport { formatHex } from './formatters';\nimport Rows from './Rows';\nimport ViewProps from './ViewProps';\n\nconst PixelBlock: FunctionComponent<ViewProps> = (props) => {\n  const formatter = useCallback((position, value) => {\n    const style = {\n      background: formatHex(value, 8, '#'),\n      width: 6,\n      height: 6,\n    };\n    return <div style={style} data-position={position} />;\n  }, []);\n\n  return <Rows className=\"Pixel\" bitLength={BitLength.Dword} cellFormatter={formatter} {...props} />;\n};\n\nexport default PixelBlock;\n","import React, { FunctionComponent, useCallback } from 'react';\nimport BitLength from './BitLength';\nimport Rows from './Rows';\nimport ViewProps from './ViewProps';\n\nconst TextBlock: FunctionComponent<ViewProps> = (props) => {\n  const formatter = useCallback((position, value) => String.fromCharCode(value).replace(/[^ -~]+/g, '.'), []);\n\n  return <Rows className=\"Text\" bitLength={BitLength.Byte} cellFormatter={formatter} {...props} />;\n};\n\nexport default TextBlock;\n","import React, { FunctionComponent, ReactElement, useEffect, useState } from 'react';\nimport { formatBinary, formatHex } from './formatters';\n\ninterface InspectorProps {\n  className: string;\n  data: DataView;\n  cursor: number;\n  onSplitBlock: () => void;\n}\n\nconst Inspector: FunctionComponent<InspectorProps> = ({ className, data, cursor, onSplitBlock }) => {\n  const byte = data.getUint8(cursor);\n\n  const word = cursor + 1 < data.byteLength ? data.getUint16(cursor) : byte;\n  const dword = cursor + 3 < data.byteLength ? data.getUint32(cursor) : byte;\n\n  const wordl = cursor + 1 < data.byteLength ? data.getUint16(cursor, true) : byte;\n  const dwordl = cursor + 3 < data.byteLength ? data.getUint32(cursor, true) : byte;\n\n  return (\n    <div className={className}>\n      <div className=\"InspectorTitle\">{formatHex(cursor, 16)}</div>\n      <button onClick={onSplitBlock}>Split</button>\n      <div className=\"InspectorRow\">\n        <div className=\"InspectorHeader\">Binary</div>\n        <div>{formatBinary(byte, 8)}</div>\n        <div className=\"InspectorType\">Big-endian</div>\n        <div>{formatBinary(word, 16)}</div>\n        <div>{formatBinary(dword, 32)}</div>\n        <div className=\"InspectorType\">Little-endian</div>\n        <div>{formatBinary(wordl, 16)}</div>\n        <div>{formatBinary(dwordl, 32)}</div>\n      </div>\n      <div className=\"InspectorRow\">\n        <div className=\"InspectorHeader\">Hex</div>\n        <div>{formatHex(byte, 2)}</div>\n        <div className=\"InspectorType\">Big-endian</div>\n        <div>{formatHex(word, 4)}</div>\n        <div>{formatHex(dword, 8)}</div>\n        <div className=\"InspectorType\">Little-endian</div>\n        <div>{formatHex(wordl, 4)}</div>\n        <div>{formatHex(dwordl, 8)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Inspector;\n","import { useCallback, useState } from 'react';\n\ninterface DropAreaProps {\n  onUpdateData: (data: DataView) => void;\n}\nconst DropArea = ({ onUpdateData }: DropAreaProps) => {\n  const defaultText = 'Drag File Here';\n  const [label, setLabel] = useState(defaultText);\n\n  const onDrop = useCallback(\n    (e) => {\n      const item = e.dataTransfer?.files?.[0];\n      e.preventDefault();\n\n      async function readFile() {\n        if (item) {\n          const buffer = await item.arrayBuffer();\n          onUpdateData(new DataView(buffer));\n        }\n      }\n\n      readFile();\n      setLabel(defaultText);\n    },\n    [onUpdateData],\n  );\n\n  const onDragOver = useCallback((e) => {\n    setLabel('Drop!');\n    e.preventDefault();\n  }, []);\n\n  const onDragLeave = useCallback((e) => {\n    setLabel(defaultText);\n  }, []);\n\n  return (\n    <div className=\"DropArea\" onDrop={onDrop} onDragOver={onDragOver} onDragLeave={onDragLeave}>\n      <h1>{label}</h1>;\n    </div>\n  );\n};\n\nexport default DropArea;\n","import Layout from './Layout';\n\nexport default class RowLayout extends Layout {\n  rowHeight: number;\n\n  constructor(length: number, columns: number, rowHeight: number) {\n    super(length);\n    this.columns = columns;\n    this.rowHeight = rowHeight;\n  }\n\n  getHeight = () => Math.ceil(this.length / this.columns) * this.rowHeight;\n}\n","export default abstract class Layout {\n  columns = 1;\n  length: number;\n\n  constructor(length: number) {\n    this.length = length;\n  }\n\n  abstract getHeight: () => number;\n}\n","import RowLayout from './RowLayout';\n\nexport default class HexLayout extends RowLayout {\n  constructor(length: number) {\n    super(length, 16, 32);\n  }\n}\n","import RowLayout from './RowLayout';\n\nexport default class TextLayout extends RowLayout {\n  constructor(length: number) {\n    super(length, 32, 32);\n  }\n}\n","import RowLayout from './RowLayout';\n\nexport default class PixelLayout extends RowLayout {\n  constructor(length: number) {\n    super(length, 256, 8);\n  }\n}\n","import BlockType from './BlockType';\nimport HexLayout from './HexLayout';\nimport TextLayout from './TextLayout';\nimport PixelLayout from './PixelLayout';\n\nconst layoutsForType = {\n  [BlockType.Hex]: HexLayout,\n  [BlockType.Text]: TextLayout,\n  [BlockType.Pixel]: PixelLayout,\n};\n\nexport default layoutsForType;\n","import React, { FunctionComponent, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport Block from './Block';\nimport BlockType from './BlockType';\nimport HexBlock from './HexBlock';\nimport PixelBlock from './PixelBlock';\nimport TextBlock from './TextBlock';\nimport Inspector from './Inspector';\nimport DropArea from './DropArea';\nimport Layout from './Layout';\nimport layoutsForType from './layoutsForType';\nimport ViewProps from './ViewProps';\nimport './App.css';\n\nconst componentsForType: { [blockType: string]: FunctionComponent<ViewProps> } = {\n  [BlockType.Hex]: HexBlock,\n  [BlockType.Text]: TextBlock,\n  [BlockType.Pixel]: PixelBlock,\n};\n\ninterface BlockDefinition {\n  type: BlockType;\n  length: number;\n}\n\ninterface BlockLayout {\n  type: BlockType;\n  start: number;\n  end: number;\n  length: number;\n  top: number;\n  height: number;\n  layout: Layout;\n}\n\nfunction App() {\n  const [data, setData] = useState<DataView>();\n  const [blocks, setBlocks] = useState<BlockDefinition[]>([]);\n  const [cursor, setCursor] = useState(0);\n\n  const scroller = useRef<HTMLDivElement>(null);\n  const [visibleStart, setVisibleStart] = useState(0);\n  const [visibleEnd, setVisibleEnd] = useState(0);\n\n  useEffect(() => {\n    async function createFile() {\n      let response = await fetch('CT-MONO2-16-brain.dcm');\n      let data = await response.blob();\n      let array = await data.arrayBuffer();\n      setData(new DataView(array));\n\n      const blockSize = 1024;\n      const blocks = [];\n      for (let position = 0; position < array.byteLength; position += blockSize) {\n        const length = Math.min(blockSize, array.byteLength - position);\n        blocks.push({ type: BlockType.Hex, length });\n      }\n      setBlocks(blocks);\n    }\n    createFile();\n  }, []);\n\n  // Cache more detail about the layout\n  const blockLayout = useMemo(() => {\n    const result: BlockLayout[] = [];\n    let position = 0;\n    let top = 0;\n\n    if (data) {\n      blocks.forEach(({ type, length }) => {\n        const start = position;\n        const end = Math.min(position + length, data.byteLength);\n\n        const layout = new layoutsForType[type](length);\n        const height = layout.getHeight();\n\n        // Only add the block if it covers data\n        if (start < data.byteLength) {\n          result.push({\n            type,\n            start,\n            end,\n            length: end - start,\n            top,\n            height,\n            layout,\n          });\n        }\n\n        position += length;\n        top += height;\n      });\n    }\n\n    return result;\n  }, [blocks, data]);\n\n  const scrollerStyle = useMemo(() => {\n    const lastBlock = blockLayout[blockLayout.length - 1];\n\n    return {\n      height: lastBlock ? lastBlock.top + lastBlock.height : 0,\n    };\n  }, [blockLayout]);\n\n  const onUpdateScroll = useCallback(() => {\n    const visibleStart = scroller.current?.scrollTop ?? 0;\n    const visibleHeight = scroller.current?.offsetHeight ?? 0;\n    setVisibleStart(visibleStart);\n    setVisibleEnd(visibleStart + visibleHeight);\n  }, []);\n\n  useLayoutEffect(() => {\n    if (data) {\n      onUpdateScroll();\n    }\n  }, [data, onUpdateScroll]);\n\n  const onUpdateType = useCallback(\n    (start, type) => {\n      const index = blockLayout.findIndex((block) => block.start === start);\n      if (index === -1) {\n        return;\n      }\n\n      const newBlocks = blocks.slice();\n      newBlocks[index].type = type;\n\n      setBlocks(newBlocks);\n    },\n    [blocks, blockLayout],\n  );\n\n  const onUpdateLength = useCallback(\n    (start, length) => {\n      const index = blockLayout.findIndex((block) => block.start === start);\n      if (index === -1) {\n        return;\n      }\n\n      const newBlocks = blocks.slice();\n      newBlocks[index].length = length;\n\n      setBlocks(newBlocks);\n    },\n    [blocks, blockLayout],\n  );\n\n  const onMergeBlock = useCallback(\n    (start) => {\n      const index = blockLayout.findIndex((block) => block.start === start);\n\n      // Can't delete the first block\n      if (index < 1) {\n        return;\n      }\n\n      // Remove the block and add its length to the previous one\n      const newBlocks = blocks.slice();\n      newBlocks.splice(index, 1);\n      newBlocks[index - 1].length += blocks[index].length;\n\n      setBlocks(newBlocks);\n    },\n    [blocks, blockLayout],\n  );\n\n  const onSplitBlock = useCallback(() => {\n    const index = blockLayout.findIndex((block) => cursor >= block.start && cursor < block.end);\n    if (index === -1) {\n      return;\n    }\n\n    // Can't split at the first cell\n    const oldLayoutBlock = blockLayout[index];\n    if (cursor === oldLayoutBlock.start) {\n      return;\n    }\n\n    const newBlocks = blocks.slice();\n    const partition = cursor - oldLayoutBlock.start;\n\n    newBlocks[index].length = partition;\n    const newBlock = {\n      ...blocks[index],\n      length: oldLayoutBlock.length - partition,\n    };\n\n    newBlocks.splice(index + 1, 0, newBlock);\n\n    setBlocks(newBlocks);\n  }, [blocks, blockLayout, cursor]);\n\n  return data ? (\n    <div className=\"App\">\n      <div className=\"Blocks\" onScroll={onUpdateScroll} ref={scroller}>\n        <div className=\"Scroller\" style={scrollerStyle}>\n          {blockLayout.map(({ type, start, length, top, height, layout }) => (\n            <Block\n              key={start}\n              type={type}\n              data={data}\n              start={start}\n              length={length}\n              visibleStart={visibleStart}\n              visibleEnd={visibleEnd}\n              top={top}\n              height={height}\n              columns={layout.columns}\n              cursor={cursor}\n              contentsComponent={componentsForType[type]}\n              onUpdateCursor={setCursor}\n              onUpdateLength={onUpdateLength}\n              onUpdateType={onUpdateType}\n              onMergeBlock={onMergeBlock}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"Panel\">\n        <Inspector className=\"Inspector\" data={data} cursor={cursor} onSplitBlock={onSplitBlock} />\n        <DropArea onUpdateData={setData} />\n      </div>\n    </div>\n  ) : (\n    <h1>Loading</h1>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}